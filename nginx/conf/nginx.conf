# nginx config
#
# 用户和用户组
# user  nginx;

# 允许生成的 worker 进程数，一般设置为和CPU核数一样，默认为1
worker_processes  auto;

# error_log 日志存放位置和日志级别
error_log  /var/log/nginx/error.log notice;

# nginx进程pid存放位置
pid        /var/run/nginx.pid;

# 配置用户网络连接 
events {
    # 最大连接数
    worker_connections  1024;
    accept_mutex on;
    mute
}

# 可以嵌套多个 server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。
http {
    # 文件扩展名与文件类型映射表
    include       /etc/nginx/mime.types;
    # 默认文件类型
    default_type  application/octet-stream;

    # 日志格式
    log_format  my_format  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  /var/log/nginx/access.log  my_format;

    # sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，可配置在 http、server、location 等块级别。
    sendfile        on;
    # sendfile_max_chunk 512k;

    #tcp_nopush     on;

    # 会话保持时间，可以在 http、server、location 等块级别配置。
    keepalive_timeout  65;
    
    # 如果超过这个时间，客户端没有任何活动，nginx关闭连接。
    send_timeout 2m;

    # 上传文件大小限制
    client_max_body_size 75MB;

    # 告诉nginx关闭不响应的客户端连接。这将会释放那个客户端所占有的内存空间。
    reset_timedout_connection on;

    # 文件压缩
    #gzip  on;

    # 该指令设置与upstream服务器的连接超时时间，这个超时建议不超过75秒。
    proxy_connect_timeout 60;

    # 该指令设置应用服务器的响应超时时间，默认60秒。
    proxy_read_timeout 60；
 
    # 设置了发送请求给upstream服务器的超时时间
    proxy_send_timeout 60;

    # 配置后端服务器具体地址，负载均衡配置不可或缺的部分
    upstream test {
        # 默认采用轮询的方式，通过 weight 可以指定轮询的权重，权重越高，分配到的请求越多
        # ip_hash; # 一致性哈希算法，每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题
        # hash $request_uri; # 一致性哈希算法，每个请求按访问的url的hash结果分配，这样每个url定向到一个后端服务器，可以解决缓存的问题
        # fair; # 按后端服务器的响应时间来分配请求，响应时间短的优先分配

        # 配置了权重，请求会更多
        server	127.0.0.1:8000	weight=2;
        # 设置了服务的最大连接数，设置了30s内最多请求失败次数为4，一般设置为1
        server	127.0.0.1:8001	max_conns=3	max_fails=4	fail_timeout=30s;
        # 表示这是一个备份服务，在其他服务可用的情况下，不会被请求
        server	127.0.0.1:8002	backup;
        # 表示这个服务已经下线，不会被请求
        server	127.0.0.1:8003	down;
        server	127.0.0.1:8004;
    }

    # https
    # server {
    #     listen 443 ssl http2;
    #     listen [::]:443 ssl http2;
    #     server_name your_domain.com;
    
    #     # ssl证书及密钥路径
    #     ssl_certificate /path/to/your/fullchain.pem;
    #     ssl_certificate_key /path/to/your/privkey.pem;
    
    #     # SSL会话信息
    #     client_max_body_size 75MB;
    #     keepalive_timeout 10;
    
    #     location / {
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #         proxy_set_header Host $http_host;
    #         proxy_redirect off;
    #         proxy_pass http://django; # Django+uwsgi不在本机上，使用代理转发
    #     }
    # }
    
    # 启动的测试服务
    server {
        listen 8000;
        return 200 'server: 8000';
    }
    server {
        listen 8001;
        return 200 'server: 8001';
    }
    server {
        listen 8002;
        return 200 'server: 8002';
    }
    server {
        listen 8003;
        return 200 'server: 8003';
    }
    server {
        listen 8004;
        return 200 'server: 8004';
    }
    
    include /etc/nginx/conf.d/*.conf;
}
